Given a string A containing just the characters ’(‘ and ’)’.

Find the length of the longest valid (well-formed) parentheses substring.



Input Format:

The only argument given is string A.
Output Format:

Return the length of the longest valid (well-formed) parentheses substring.
Constraints:

1 <= length(A) <= 750000
For Example

Input 1:
    A = "(()"
Output 1:
    2
    Explanation 1:
        The longest valid parentheses substring is "()", which has length = 2.

Input 2:
    A = ")()())"
Output 2:
    4
    Explanation 2:
        The longest valid parentheses substring is "()()", which has length = 4.
Seen this question in a real interview before



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

int Solution::longestValidParentheses(string A) 
{
    int n = A.size();
    stack<int> st;
    int ans = 0, ct =0;
    st.push(-1);
    for(int i =0;i<n;i++)
    {
        if(A[i]=='('){
            st.push(i);
        }
        else{
            
            if(!st.empty()){
                st.pop();
                if(!st.empty())ans = max(ans,i-st.top());
                //if(ans<ct)ans = ct;
                else st.push(i);
            }
            //else{
              //  ct = 0;
            //}
            //cout<<st.size()<<" "<<ct<<endl;
        }
    }
    return ans;
}
