Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

 

Example 1:

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.
Example 2:

Input: text1 = "abc", text2 = "abc"
Output: 3
Explanation: The longest common subsequence is "abc" and its length is 3.
Example 3:

Input: text1 = "abc", text2 = "def"
Output: 0
Explanation: There is no such common subsequence, so the result is 0.
 

Constraints:

1 <= text1.length, text2.length <= 1000
text1 and text2 consist of only lowercase English characters.


$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


class Solution {
public:
    
    int arr[1001][1001];
    int n1, n2;
    int fun(string s1, string s2, int i , int j )
    {
        if(i>=n1)return 0;
        if(j>=n2)return 0;
        
        if(arr[i][j]!=-1)return arr[i][j];
        if(arr[i+1][j+1]==-1)arr[i+1][j+1] = fun(s1,s2,i+1,j+1);
        if(s1[i]==s2[j]){
            arr[i][j] =arr[i+1][j+1]+1;
            return arr[i][j];
        }
        if(arr[i+1][j]==-1)arr[i+1][j] = fun(s1,s2,i+1,j);
        if(arr[i][j+1]==-1)arr[i][j+1] = fun(s1,s2,i,j+1);
        
        arr[i][j] = max(arr[i+1][j],arr[i][j+1]);
        if(s1[i]==s2[j]){
            arr[i][j] =arr[i+1][j+1]+1;
            return arr[i][j];
        }
        else {
            arr[i][j] = max(arr[i][j],arr[i+1][j+1]);
        }
        return arr[i][j];
    }
    
    
    int longestCommonSubsequence(string text1, string text2) 
    {
        n1 = text1.size();
        n2 = text2.size();
        for(int i =0;i<=n1;i++){
            for(int j =0;j<=n2;j++){
                if(i==0||j==0)arr[i][j]=0;
                arr[i][j]=0;
            }
        }
        
        for(int i =1;i<=n1;i++){
            for(int j =1;j<=n2;j++){
                if(text1[i-1] == text2[j-1]){
                    arr[i][j] = 1+arr[i-1][j-1];
                    
                }
                else{
                    arr[i][j]=max(arr[i-1][j],arr[i][j-1]);
                    arr[i][j] = max(arr[i][j],arr[i-1][j-1]);
                }
            }
        }
        return arr[n1][n2];
       // return arr[0][0];
        
    }
};
