Given a string s, sort it in decreasing order based on the frequency of characters, and return the sorted string.

 

Example 1:

Input: s = "tree"
Output: "eert"
Explanation: 'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input: s = "cccaaa"
Output: "aaaccc"
Explanation: Both 'c' and 'a' appear three times, so "aaaccc" is also a valid answer.
Note that "cacaca" is incorrect, as the same characters must be together.
Example 3:

Input: s = "Aabb"
Output: "bbAa"
Explanation: "bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.
 

Constraints:

1 <= s.length <= 5 * 105
s consists of English letters and digits.


#########################################################################################################################################
class Solution {
public:
    string frequencySort(string s) 
    {
        int n = s.size();
        unordered_map<char, int> umap;
        for(int i =0;i<n;i++){
            if(umap.find(s[i])==umap.end()){
                umap[s[i]]=1;
            }
            else umap[s[i]]++;
        }
        priority_queue<pair<int, char>> p;
        
        for(int i =0;i<n;i++){
            if(umap[s[i]]!=-1){
                p.push(make_pair(umap[s[i]],s[i]));
                umap[s[i]]=-1;
            }    
        }
        string ans;
        while(!p.empty()){
            pair<int,char> pq = p.top();
            int m = pq.first;
            for(int j =0;j<m;j++){
                ans.push_back(pq.second);
               
            }
             p.pop();
        }
        //reverse(ans.begin(),ans.end());
        return ans;
    }
};
