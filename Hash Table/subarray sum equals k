Given an array of integers nums and an integer k, return the total number of continuous subarrays whose sum equals to k.

 

Example 1:

Input: nums = [1,1,1], k = 2
Output: 2
Example 2:

Input: nums = [1,2,3], k = 3
Output: 2
 

Constraints:

1 <= nums.length <= 2 * 104
-1000 <= nums[i] <= 1000
-107 <= k <= 107

##################################################################################################################

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) 
    {
       unordered_map<int, int> m;
    int ps = 0;
    int cnt  = 0;
    m[0] = 1;
        int n = nums.size();
    for(int i = 0; i<n; i++){
        ps += nums[i];
        if(m.find(ps - k) != m.end()){
            cnt += m[ps-k];
        }
        m[ps]++;
        cout<<ps<<" "<<m[ps]<<endl;
    }
    return cnt;
    }
};
