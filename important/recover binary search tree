Two elements of a binary search tree (BST) are swapped by mistake.
Tell us the 2 values swapping which the tree will be restored.

 Note:
A solution using O(n) space is pretty straight forward. Could you devise a constant space solution? 
Example :


Input : 
         1
        / \
       2   3

Output : 
       [1, 2]

Explanation : Swapping 1 and 2 will change the BST to be 
         2
        / \
       1   3
which is a valid BST          



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

void inorder(TreeNode * A, int &first,int &second,int &prev)
{
    if(!A)
        return ;
    inorder(A->left,first,second,prev);
    if(prev!=INT_MIN and prev>A->val)
    {
        if(first>A->val)
        first=A->val;
        if(second<prev)
        second=prev;
    }
    prev=A->val;
    inorder(A->right,first,second,prev);

}
vector<int> Solution::recoverTree(TreeNode* A) {


 int first=INT_MAX,second=INT_MIN,prev=INT_MIN;
 inorder(A,first,second,prev);
 return {first,second};
}

